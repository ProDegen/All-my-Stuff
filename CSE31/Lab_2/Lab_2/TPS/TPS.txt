TPS activty 1:
1.
    Michael Salas
2.
    http://www.gdbtutorial.com/tutorial/how-install-gdb
    https://www.youtube.com/watch?v=bWH-nL7v5F4
    https://manpages.ubuntu.com/manpages/bionic/man1/gdb.1.html

TPS activity 2:
1.
    cc -g punishment.c
2.
    gdb a.out
3.
    type run
4.
    breakpoints are points you can run your code up to, say i make a break point at line 2
    the gdb will only run the 2 lines of code, you can set this with either "break" or "b"
    followed by the line or function u want to break at
5. 
    here u can run the next line by typing either "next" or "n" and then runing it 
6.
    you can use either "print" or "p" followed by the variable name to displat that
    variable
7.
    you can use "continue" or "c"
8. 
    you can use quit to exit the debugger

TPS activty 3:
1.
    4 variables, 2 pointers, pointers are varable that point to the adress value 
    of whatever its equal too
2.
    x, y , and arr[0] all dont have values so i predict theyll either be 0 or some
    random number, i think this happens because it doesnt have an assigned value it
    instead prints it memory value
3. 
    you just make them equal to something, in this case were not sure  what we want so
    just use 0
4.
    printf("%d\n", &x);
    printf("%d\n", &y);
5.
    printf("%d\n", px);
    printf("%d\n", py);  
    printf("%d\n", &px);
    printf("%d\n", &py); 
6.
        for(int i = 0; i<10;i++){
        printf("%d\n", *(arr + i));
    }
7.
    yes they are,
    this code proves it 
        printf("%d\n", arr);  
        printf("%d\n", &arr[0]);  
8.
    the result is as expected, the adress of arr is the same as arr[0] which makes sense
    because arr is just the adress of the first in the list, that why in the loop were
    able to just just add 1(or i) to get the next adress, AKA the next number